package generator

import (
	"errors"
	"github.com/zeromicro/goctl/rpc/execx"
	"os/exec"
	"strings"

	"github.com/zeromicro/goctl/util/console"
)

// DefaultGenerator defines the environment needs of rpc service generation
type DefaultGenerator struct {
	log console.Console
}

// just test interface implement
var _ Generator = &DefaultGenerator{}

// NewDefaultGenerator returns an instance of DefaultGenerator
func NewDefaultGenerator() Generator {
	log := console.NewColorConsole()
	return &DefaultGenerator{
		log: log,
	}
}

// Prepare provides environment detection generated by rpc service,
// including go environment, protoc, whether protoc-gen-go is installed or not
func (g *DefaultGenerator) Prepare() error {
	_, err := exec.LookPath("go")
	if err != nil {
		return err
	}

	_, err = exec.LookPath("protoc")
	if err != nil {
		return err
	}

	_, err = exec.LookPath("protoc-gen-go")
	if err != nil {
		return err
	}

	version, _ := execx.Run("protoc-gen-go --version", "")
	if strings.HasPrefix(version, "protoc-gen-go") {
		return errors.New(`unsupported plugin protoc-gen-go which installed from google.golang.org/protobuf/cmd/protoc-gen-go, 
please replace it by the following command:
go get -u github.com/golang/protobuf/protoc-gen-go
we recommend to use version before v1.3.5`)
	}

	return err
}
