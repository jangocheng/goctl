package gogen

import (
	"fmt"
	"io"
	"os"
	"path"
	"path/filepath"
	"strings"

	"github.com/zeromicro/goctl/api/spec"
	apiutil "github.com/zeromicro/goctl/api/util"
	"github.com/zeromicro/goctl/config"
	"github.com/zeromicro/goctl/util"
	"github.com/zeromicro/goctl/util/format"
)

const (
	typesFile     = "types"
	typesTemplate = `// Code generated by goctl. DO NOT EDIT.
package types
{{if .containsTime}}
import (
	"time"
	{{.import}}
){{end}}
{{if .import}}import (
	{{.import}}
){{end}}
{{.types}}
`
)

// BuildTypes gen types to string
func BuildTypes(types []spec.Type) (string, error) {
	var builder strings.Builder
	first := true
	for _, tp := range types {
		if first {
			first = false
		} else {
			builder.WriteString("\n\n")
		}
		if err := writeType(&builder, tp); err != nil {
			return "", apiutil.WrapErr(err, "Type "+tp.Name()+" generate error")
		}
	}

	return builder.String(), nil
}

func onlyGenTypes(filename string, cfg *config.Config, api *spec.ApiSpec) error {
	val, err := BuildTypes(api.Types)
	if err != nil {
		return err
	}

	ext := filepath.Ext(filename)
	dir, base := filepath.Split(filename)
	fn := strings.TrimSuffix(base, ext)
	typeFilename, err := format.FileNamingFormat(cfg.NamingFormat, fn)
	if err != nil {
		return err
	}

	filename = filepath.Join(dir, typeFilename+".go")

	return util.With("types").Parse(typesTemplate).GoFmt(true).SaveTo(map[string]interface{}{
		"containsTime": false,
		"import":       []string{},
		"types":        val,
	}, filename, true)
}

func genTypes(dir string, importMap map[string]string, cfg *config.Config, api *spec.ApiSpec) error {
	val, err := BuildTypes(api.Types)
	if err != nil {
		return err
	}

	typeFilename, err := format.FileNamingFormat(cfg.NamingFormat, typesFile)
	if err != nil {
		return err
	}

	typeFilename = typeFilename + ".go"
	filename := path.Join(dir, typesDir, typeFilename)
	os.Remove(filename)

	var imports []string
	for _, item := range api.Imports {
		if len(item.AsPackage) > 0 {
			refer := importMap[item.Value]
			if len(refer) == 0 {
				return fmt.Errorf("should specific the import go path of %s from command line", item.Value)
			}

			imports = append(imports, fmt.Sprintf(`%s "%s"`, item.AsPackage, refer))
		}
	}

	return genFile(fileGenConfig{
		dir:             dir,
		subdir:          typesDir,
		filename:        typeFilename,
		templateName:    "typesTemplate",
		category:        "",
		templateFile:    "",
		builtinTemplate: typesTemplate,
		data: map[string]interface{}{
			"types":        val,
			"containsTime": false,
			"import":       strings.Join(imports, "\n"),
		},
	})
}

func writeType(writer io.Writer, tp spec.Type) error {
	structType, ok := tp.(spec.DefineStruct)
	if !ok {
		return fmt.Errorf("unspport struct type: %s", tp.Name())
	}

	fmt.Fprintf(writer, "type %s struct {\n", util.Title(tp.Name()))
	for _, member := range structType.Members {
		if member.IsInline {
			if _, err := fmt.Fprintf(writer, "%s\n", strings.Title(member.Type.Name())); err != nil {
				return err
			}

			continue
		}

		if err := writeProperty(writer, member.Name, member.Tag, member.GetComment(), member.Type, 1); err != nil {
			return err
		}
	}
	fmt.Fprintf(writer, "}")
	return nil
}
